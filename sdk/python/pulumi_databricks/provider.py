# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 azure_pat_token_duration_seconds: Optional[pulumi.Input[str]] = None,
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 azure_use_pat_for_cli: Optional[pulumi.Input[bool]] = None,
                 azure_use_pat_for_spn: Optional[pulumi.Input[bool]] = None,
                 azure_workspace_name: Optional[pulumi.Input[str]] = None,
                 azure_workspace_resource_id: Optional[pulumi.Input[str]] = None,
                 config_file: Optional[pulumi.Input[str]] = None,
                 debug_headers: Optional[pulumi.Input[bool]] = None,
                 debug_truncate_bytes: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] azure_pat_token_duration_seconds: Currently secret scopes are not accessible via AAD tokens so we will need to create a PAT token
        :param pulumi.Input[bool] azure_use_pat_for_cli: Create ephemeral PAT tokens also for AZ CLI authenticated requests
        :param pulumi.Input[bool] azure_use_pat_for_spn: Create ephemeral PAT tokens instead of AAD tokens for SPN
        :param pulumi.Input[str] config_file: Location of the Databricks CLI credentials file, that is created by `databricks configure --token` command. By default,
               it is located in ~/.databrickscfg. Check https://docs.databricks.com/dev-tools/cli/index.html#set-up-authentication for
               docs. Config file credentials will only be used when host/token are not provided.
        :param pulumi.Input[bool] debug_headers: Debug HTTP headers of requests made by the provider. Default is false. Visible only when TF_LOG=DEBUG is set
        :param pulumi.Input[int] debug_truncate_bytes: Truncate JSON fields in JSON above this limit. Default is 96. Visible only when TF_LOG=DEBUG is set
        :param pulumi.Input[str] profile: Connection profile specified within ~/.databrickscfg. Please check
               https://docs.databricks.com/dev-tools/cli/index.html#connection-profiles for documentation.
        :param pulumi.Input[int] rate_limit: Maximum number of requests per second made to Databricks REST API by Terraform.
        :param pulumi.Input[bool] skip_verify: Skip SSL certificate verification for HTTP calls. Use at your own risk.
        """
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_environment is not None:
            pulumi.set(__self__, "azure_environment", azure_environment)
        if azure_pat_token_duration_seconds is not None:
            pulumi.set(__self__, "azure_pat_token_duration_seconds", azure_pat_token_duration_seconds)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_subscription_id is not None:
            pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if azure_use_pat_for_cli is not None:
            pulumi.set(__self__, "azure_use_pat_for_cli", azure_use_pat_for_cli)
        if azure_use_pat_for_spn is not None:
            pulumi.set(__self__, "azure_use_pat_for_spn", azure_use_pat_for_spn)
        if azure_workspace_name is not None:
            pulumi.set(__self__, "azure_workspace_name", azure_workspace_name)
        if azure_workspace_resource_id is not None:
            pulumi.set(__self__, "azure_workspace_resource_id", azure_workspace_resource_id)
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if debug_headers is not None:
            pulumi.set(__self__, "debug_headers", debug_headers)
        if debug_truncate_bytes is not None:
            pulumi.set(__self__, "debug_truncate_bytes", debug_truncate_bytes)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if skip_verify is not None:
            pulumi.set(__self__, "skip_verify", skip_verify)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_client_secret")

    @azure_client_secret.setter
    def azure_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_secret", value)

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_environment")

    @azure_environment.setter
    def azure_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_environment", value)

    @property
    @pulumi.getter(name="azurePatTokenDurationSeconds")
    def azure_pat_token_duration_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Currently secret scopes are not accessible via AAD tokens so we will need to create a PAT token
        """
        return pulumi.get(self, "azure_pat_token_duration_seconds")

    @azure_pat_token_duration_seconds.setter
    def azure_pat_token_duration_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_pat_token_duration_seconds", value)

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_group", value)

    @property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_subscription_id")

    @azure_subscription_id.setter
    def azure_subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_subscription_id", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @property
    @pulumi.getter(name="azureUsePatForCli")
    def azure_use_pat_for_cli(self) -> Optional[pulumi.Input[bool]]:
        """
        Create ephemeral PAT tokens also for AZ CLI authenticated requests
        """
        return pulumi.get(self, "azure_use_pat_for_cli")

    @azure_use_pat_for_cli.setter
    def azure_use_pat_for_cli(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_use_pat_for_cli", value)

    @property
    @pulumi.getter(name="azureUsePatForSpn")
    def azure_use_pat_for_spn(self) -> Optional[pulumi.Input[bool]]:
        """
        Create ephemeral PAT tokens instead of AAD tokens for SPN
        """
        return pulumi.get(self, "azure_use_pat_for_spn")

    @azure_use_pat_for_spn.setter
    def azure_use_pat_for_spn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_use_pat_for_spn", value)

    @property
    @pulumi.getter(name="azureWorkspaceName")
    def azure_workspace_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_workspace_name")

    @azure_workspace_name.setter
    def azure_workspace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_workspace_name", value)

    @property
    @pulumi.getter(name="azureWorkspaceResourceId")
    def azure_workspace_resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_workspace_resource_id")

    @azure_workspace_resource_id.setter
    def azure_workspace_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_workspace_resource_id", value)

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the Databricks CLI credentials file, that is created by `databricks configure --token` command. By default,
        it is located in ~/.databrickscfg. Check https://docs.databricks.com/dev-tools/cli/index.html#set-up-authentication for
        docs. Config file credentials will only be used when host/token are not provided.
        """
        return pulumi.get(self, "config_file")

    @config_file.setter
    def config_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_file", value)

    @property
    @pulumi.getter(name="debugHeaders")
    def debug_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Debug HTTP headers of requests made by the provider. Default is false. Visible only when TF_LOG=DEBUG is set
        """
        return pulumi.get(self, "debug_headers")

    @debug_headers.setter
    def debug_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_headers", value)

    @property
    @pulumi.getter(name="debugTruncateBytes")
    def debug_truncate_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Truncate JSON fields in JSON above this limit. Default is 96. Visible only when TF_LOG=DEBUG is set
        """
        return pulumi.get(self, "debug_truncate_bytes")

    @debug_truncate_bytes.setter
    def debug_truncate_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "debug_truncate_bytes", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Connection profile specified within ~/.databrickscfg. Please check
        https://docs.databricks.com/dev-tools/cli/index.html#connection-profiles for documentation.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of requests per second made to Databricks REST API by Terraform.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter(name="skipVerify")
    def skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip SSL certificate verification for HTTP calls. Use at your own risk.
        """
        return pulumi.get(self, "skip_verify")

    @skip_verify.setter
    def skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_verify", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 azure_pat_token_duration_seconds: Optional[pulumi.Input[str]] = None,
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 azure_use_pat_for_cli: Optional[pulumi.Input[bool]] = None,
                 azure_use_pat_for_spn: Optional[pulumi.Input[bool]] = None,
                 azure_workspace_name: Optional[pulumi.Input[str]] = None,
                 azure_workspace_resource_id: Optional[pulumi.Input[str]] = None,
                 config_file: Optional[pulumi.Input[str]] = None,
                 debug_headers: Optional[pulumi.Input[bool]] = None,
                 debug_truncate_bytes: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the databricks package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] azure_pat_token_duration_seconds: Currently secret scopes are not accessible via AAD tokens so we will need to create a PAT token
        :param pulumi.Input[bool] azure_use_pat_for_cli: Create ephemeral PAT tokens also for AZ CLI authenticated requests
        :param pulumi.Input[bool] azure_use_pat_for_spn: Create ephemeral PAT tokens instead of AAD tokens for SPN
        :param pulumi.Input[str] config_file: Location of the Databricks CLI credentials file, that is created by `databricks configure --token` command. By default,
               it is located in ~/.databrickscfg. Check https://docs.databricks.com/dev-tools/cli/index.html#set-up-authentication for
               docs. Config file credentials will only be used when host/token are not provided.
        :param pulumi.Input[bool] debug_headers: Debug HTTP headers of requests made by the provider. Default is false. Visible only when TF_LOG=DEBUG is set
        :param pulumi.Input[int] debug_truncate_bytes: Truncate JSON fields in JSON above this limit. Default is 96. Visible only when TF_LOG=DEBUG is set
        :param pulumi.Input[str] profile: Connection profile specified within ~/.databrickscfg. Please check
               https://docs.databricks.com/dev-tools/cli/index.html#connection-profiles for documentation.
        :param pulumi.Input[int] rate_limit: Maximum number of requests per second made to Databricks REST API by Terraform.
        :param pulumi.Input[bool] skip_verify: Skip SSL certificate verification for HTTP calls. Use at your own risk.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the databricks package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 azure_pat_token_duration_seconds: Optional[pulumi.Input[str]] = None,
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 azure_use_pat_for_cli: Optional[pulumi.Input[bool]] = None,
                 azure_use_pat_for_spn: Optional[pulumi.Input[bool]] = None,
                 azure_workspace_name: Optional[pulumi.Input[str]] = None,
                 azure_workspace_resource_id: Optional[pulumi.Input[str]] = None,
                 config_file: Optional[pulumi.Input[str]] = None,
                 debug_headers: Optional[pulumi.Input[bool]] = None,
                 debug_truncate_bytes: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[int]] = None,
                 skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["azure_client_id"] = azure_client_id
            __props__.__dict__["azure_client_secret"] = azure_client_secret
            __props__.__dict__["azure_environment"] = azure_environment
            __props__.__dict__["azure_pat_token_duration_seconds"] = azure_pat_token_duration_seconds
            __props__.__dict__["azure_resource_group"] = azure_resource_group
            __props__.__dict__["azure_subscription_id"] = azure_subscription_id
            __props__.__dict__["azure_tenant_id"] = azure_tenant_id
            __props__.__dict__["azure_use_pat_for_cli"] = pulumi.Output.from_input(azure_use_pat_for_cli).apply(pulumi.runtime.to_json) if azure_use_pat_for_cli is not None else None
            __props__.__dict__["azure_use_pat_for_spn"] = pulumi.Output.from_input(azure_use_pat_for_spn).apply(pulumi.runtime.to_json) if azure_use_pat_for_spn is not None else None
            __props__.__dict__["azure_workspace_name"] = azure_workspace_name
            __props__.__dict__["azure_workspace_resource_id"] = azure_workspace_resource_id
            __props__.__dict__["config_file"] = config_file
            __props__.__dict__["debug_headers"] = pulumi.Output.from_input(debug_headers).apply(pulumi.runtime.to_json) if debug_headers is not None else None
            __props__.__dict__["debug_truncate_bytes"] = pulumi.Output.from_input(debug_truncate_bytes).apply(pulumi.runtime.to_json) if debug_truncate_bytes is not None else None
            __props__.__dict__["host"] = host
            __props__.__dict__["password"] = password
            __props__.__dict__["profile"] = profile
            __props__.__dict__["rate_limit"] = pulumi.Output.from_input(rate_limit).apply(pulumi.runtime.to_json) if rate_limit is not None else None
            __props__.__dict__["skip_verify"] = pulumi.Output.from_input(skip_verify).apply(pulumi.runtime.to_json) if skip_verify is not None else None
            __props__.__dict__["token"] = token
            __props__.__dict__["username"] = username
        super(Provider, __self__).__init__(
            'databricks',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_client_id")

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_client_secret")

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_environment")

    @property
    @pulumi.getter(name="azurePatTokenDurationSeconds")
    def azure_pat_token_duration_seconds(self) -> pulumi.Output[Optional[str]]:
        """
        Currently secret scopes are not accessible via AAD tokens so we will need to create a PAT token
        """
        return pulumi.get(self, "azure_pat_token_duration_seconds")

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_resource_group")

    @property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_subscription_id")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_tenant_id")

    @property
    @pulumi.getter(name="azureWorkspaceName")
    def azure_workspace_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_workspace_name")

    @property
    @pulumi.getter(name="azureWorkspaceResourceId")
    def azure_workspace_resource_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_workspace_resource_id")

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> pulumi.Output[Optional[str]]:
        """
        Location of the Databricks CLI credentials file, that is created by `databricks configure --token` command. By default,
        it is located in ~/.databrickscfg. Check https://docs.databricks.com/dev-tools/cli/index.html#set-up-authentication for
        docs. Config file credentials will only be used when host/token are not provided.
        """
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[str]]:
        """
        Connection profile specified within ~/.databrickscfg. Please check
        https://docs.databricks.com/dev-tools/cli/index.html#connection-profiles for documentation.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "username")

